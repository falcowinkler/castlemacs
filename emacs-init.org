* Clojure
** Cider
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'cider)
  (package-install 'cider))
(setq cider-repl-wrap-history t)
(setq cider-repl-history-size 1000)
(setq cider-repl-history-file "~/.cider-repl-history")
#+END_SRC
** Parinfer
#+BEGIN_SRC emacs-lisp
(use-package parinfer
  :ensure t
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
             pretty-parens  ; different paren styles for different modes.
             evil           ; If you use Evil.
             lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
             paredit        ; Introduce some paredit commands.
             smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
             smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC
* Python
** Other
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "/usr/local/bin/python3")
#+END_SRC
** Pyenv
#+BEGIN_SRC emacs-lisp
(use-package pyenv-mode
  :ensure t
  :config
  (defun projectile-pyenv-mode-set ()
    "Set pyenv version matching project name."
    (let ((project (projectile-project-name)))
      (if (member project (pyenv-mode-versions))
          (pyenv-mode-set project)
        (pyenv-mode-unset))))
  (add-hook 'projectile-switch-project-hook 'projectile-pyenv-mode-set)
  (add-hook 'python-mode-hook 'pyenv-mode))
(use-package pyenv-mode-auto
  :ensure t)
#+END_SRC
** Jedi
#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :init
  (add-to-list 'company-backends 'company-jedi)
  :config
  (use-package company-jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-jedi)))
    (setq company-jedi-python-bin "python")))
#+END_SRC
** Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :commands elpy-enable
  :init (with-eval-after-load 'python (elpy-enable))

  :config
  (electric-indent-local-mode -1)
  (delete 'elpy-module-highlight-indentation elpy-modules)
  (delete 'elpy-module-flymake elpy-modules)

  (defun ha/elpy-goto-definition ()
    (interactive)
    (condition-case err
        (elpy-goto-definition)
      ('error (xref-find-definitions (symbol-name (symbol-at-point))))))

  :bind (:map elpy-mode-map ([remap elpy-goto-definition] .
                             ha/elpy-goto-definition)))
#+END_SRC
* Other
** Minor configs
#+BEGIN_SRC emacs-lisp
(setq apropos-sort-by-scores t)
(use-package htmlize)
(use-package ox-twbs) ; Export org-mode stuff to twitter-bootstrap webpage
; Fullscreen on start
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(setq delete-selection-mode t)
#+END_SRC
**  Utility functions
#+BEGIN_SRC emacs-lisp
(defun org-python-code-block ()
  (interactive)
  (save-excursion
    (insert "#+BEGIN_SRC python :results output :exports both\n\n#+END_SRC"))
  (next-line))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun org-elisp-code-block ()
  (interactive)
  (save-excursion
    (insert "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC"))
  (next-line))
#+END_SRC

* Org
** Babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '((C . t)
                             (python . t)))
#+END_SRC
** Publishing my site
#+BEGIN_SRC emacs-lisp
(require 'ox-publish)
(setq org-twbs-postamble nil)
(setq org-publish-project-alist '(("org-notes"
                                   :base-directory "~/Desktop/Projekte/falcowinkler.github.io/org"
                                   :base-extension "org"
                                   :publishing-directory "~/Desktop/Projekte/falcowinkler.github.io"
                                   :recursive t
                                   :publishing-function org-twbs-publish-to-html
                                   :headline-levels 4
                                   :auto-preamble t
                                   :auto-postamble nil
                                   :html-head-extra "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/python_course.css\">")))
#+END_SRC
** Other Settings
Disable confirmation for code evaluation
#+BEGIN_SRC emacs-lisp
(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("python"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC
Set python command for code blocks
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-i") 'imenu)
(setq org-babel-python-command "python3")
(require 'epa-file)
(epa-file-enable)
(setq epa-file-select-keys nil)
(setq org-tag-alist '(("@crypt" . ?c) ("@init" . ?i)))
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key "falcowinkler@icloud.com")
(setf epa-pinentry-mode 'loopback)
#+END_SRC

* Alerts
#+BEGIN_SRC emacs-lisp
(use-package alert
  :demand t
  :init
  (progn
    (setq alert-default-style 'notifier)
    (setq alert-user-configuration
          '(;; throw away eshell notifications if buffer is visible:
            (((:status selected visible)
              (:mode . "\\`eshell-mode\\'"))
             ignore nil)))))

(use-package helm)
#+END_SRC
* Slack
The slack integration itself is configured in an encrypted, seperate file because it has credentials..
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-端 c") 'slack-channel-select)
(global-set-key (kbd "C-端 p") 'slack-im-select)
(global-set-key (kbd "C-端 r") 'slack-select-rooms)
(global-set-key (kbd "C-端 u") 'slack-select-unread-rooms)
#+END_SRC
